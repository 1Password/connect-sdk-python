# coding: utf-8

"""
    1Password Connect

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Vault(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'attribute_version': 'int',
        'content_version': 'int',
        'items': 'int',
        'type': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'attribute_version': 'attributeVersion',
        'content_version': 'contentVersion',
        'items': 'items',
        'type': 'type',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, name=None, description=None, attribute_version=None, content_version=None, items=None, type=None, created_at=None, updated_at=None):  # noqa: E501
        """Vault - a model defined in OpenAPI"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._attribute_version = None
        self._content_version = None
        self._items = None
        self._type = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if attribute_version is not None:
            self.attribute_version = attribute_version
        if content_version is not None:
            self.content_version = content_version
        if items is not None:
            self.items = items
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Vault.  # noqa: E501


        :return: The id of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vault.


        :param id: The id of this Vault.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Vault.  # noqa: E501


        :return: The name of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vault.


        :param name: The name of this Vault.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Vault.  # noqa: E501


        :return: The description of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Vault.


        :param description: The description of this Vault.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def attribute_version(self):
        """Gets the attribute_version of this Vault.  # noqa: E501

        The vault version  # noqa: E501

        :return: The attribute_version of this Vault.  # noqa: E501
        :rtype: int
        """
        return self._attribute_version

    @attribute_version.setter
    def attribute_version(self, attribute_version):
        """Sets the attribute_version of this Vault.

        The vault version  # noqa: E501

        :param attribute_version: The attribute_version of this Vault.  # noqa: E501
        :type: int
        """

        self._attribute_version = attribute_version

    @property
    def content_version(self):
        """Gets the content_version of this Vault.  # noqa: E501

        The version of the vault contents  # noqa: E501

        :return: The content_version of this Vault.  # noqa: E501
        :rtype: int
        """
        return self._content_version

    @content_version.setter
    def content_version(self, content_version):
        """Sets the content_version of this Vault.

        The version of the vault contents  # noqa: E501

        :param content_version: The content_version of this Vault.  # noqa: E501
        :type: int
        """

        self._content_version = content_version

    @property
    def items(self):
        """Gets the items of this Vault.  # noqa: E501

        Number of active items in the vault  # noqa: E501

        :return: The items of this Vault.  # noqa: E501
        :rtype: int
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Vault.

        Number of active items in the vault  # noqa: E501

        :param items: The items of this Vault.  # noqa: E501
        :type: int
        """

        self._items = items

    @property
    def type(self):
        """Gets the type of this Vault.  # noqa: E501


        :return: The type of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Vault.


        :param type: The type of this Vault.  # noqa: E501
        :type: str
        """
        allowed_values = ["USER_CREATED", "PERSONAL", "EVERYONE", "TRANSFER"]  # noqa: E501
        if type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this Vault.  # noqa: E501


        :return: The created_at of this Vault.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Vault.


        :param created_at: The created_at of this Vault.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Vault.  # noqa: E501


        :return: The updated_at of this Vault.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Vault.


        :param updated_at: The updated_at of this Vault.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vault):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Vault):
            return True

        return self.to_dict() != other.to_dict()
